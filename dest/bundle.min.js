"use strict";var mongoose=require("mongoose"),CustomerSchema=require("../models/customerModel");const Customer=mongoose.model("Customer",CustomerSchema);var validationResult=require("express-validator/check");const createCustomer=(request,response)=>{const errors=validationResult(request);if(!errors.isEmpty())return response.status(422).json({errors:errors.array()});new Customer(request.body).save((error,customer)=>{error&&response.send(error),response.json(customer)})},getCustomers=(request,response)=>{Customer.find({},(error,customer)=>{error&&response.send(error),response.json(customer)})},getCustomerById=(request,response)=>{Customer.findById({_id:request.params.customerId},(error,customer)=>{error&&response.send(error),response.json(customer)})},updateCustomer=(request,response)=>{const errors=validationResult(request);if(!errors.isEmpty())return response.status(422).json({errors:errors.array()});Customer.findOneAndUpdate({_id:request.params.customerId},request.body,{new:!0},(error,customer)=>{error&&response.send(error),response.json(customer)})},deleteCustomer=(request,response)=>{Customer.deleteOne({_id:request.params.customerId},(error,customer)=>{error&&response.send(error),response.json(customer)})};module.exports={getCustomers:getCustomers,createCustomer:createCustomer,getCustomerById:getCustomerById,updateCustomer:updateCustomer,deleteCustomer:deleteCustomer};mongoose=require("mongoose");var UserSchema=require("../models/userModel"),bcrypt=require("bcryptjs"),jwt=require("jsonwebtoken");validationResult=require("express-validator/check");const User=mongoose.model("User",UserSchema),register=(request,response)=>{const errors=validationResult(request);if(!errors.isEmpty())return response.status(422).json({errors:errors.array()});let newUser=new User(request.body);newUser.password=bcrypt.hashSync(request.body.password,10),newUser.save((error,user)=>{error?response.send(error):(user.password=void 0,response.json(user))})},login=(request,response)=>{User.findOne({username:request.body.username},(error,user)=>{if(error)throw error;if(user){if(user){if(user.comparePassword(request.body.password,user.password))return response.json({token:jwt.sign({username:user.username,_id:user.id},"SIGNIN")});response.status(401).json({message:"Authentication failed. Wrong password!"})}}else response.status(401).json({message:"Authentication failed. No user found!"})})},isAuthenticated=(request,response,next)=>{if(!request.user)return response.status(401).json({message:"Unauthorized user!"});next()};module.exports={register:register,login:login,isAuthenticated:isAuthenticated};CustomerSchema=new(Schema=(mongoose=require("mongoose")).Schema)({firstName:{type:String,required:"Enter a first name"},lastName:{type:String,required:"Enter a last name"},phone:{type:Number,required:"Enter a phone number"},email:{type:String,required:"Enter a email address"}});module.exports=CustomerSchema;var Schema;mongoose=require("mongoose"),bcrypt=require("bcryptjs");(UserSchema=new(Schema=mongoose.Schema)({username:{type:String,required:!0},password:{type:String,required:!0}})).methods.comparePassword=((requestedPassword,password)=>bcrypt.compareSync(requestedPassword,password)),module.exports=UserSchema;var customer=require("../controllers/customerController"),user=require("../controllers/userController");const{check:check}=require("express-validator/check"),routes=app=>(app.route("/customers").get(customer.getCustomers),app.route("/customer").post([check("firstName").not().isEmpty().withMessage("first name is required"),check("lastName").not().isEmpty().withMessage("last name is required"),check("email").isEmail().withMessage("must be an email"),check("phone").not().isEmpty().withMessage("phone number is required")],user.isAuthenticated,customer.createCustomer),app.route("/customer/:customerId").get(customer.getCustomerById),app.route("/customer/:customerId").put([check("firstName").not().isEmpty().withMessage("first name is required"),check("lastName").not().isEmpty().withMessage("last name is required"),check("email").isEmail().withMessage("must be an email"),check("phone").not().isEmpty().withMessage("phone number is required")],user.isAuthenticated,customer.updateCustomer),app.route("/customer/:customerId").delete(user.isAuthenticated,customer.deleteCustomer),app.route("/register").post([check("username").isEmail().withMessage("username must be an email"),check("password").isLength({min:8}).withMessage("must be at least 8 chars long").matches(/\d/).withMessage("must contain a number")],user.register),app.route("/login").post(user.login),app);module.exports=routes;